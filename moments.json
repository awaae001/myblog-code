[
    {
        "title": "JavaScript寄生继承",
        "link": "https://www.logdict.com/archives/ji-sheng-ji-cheng",
        "published": "2024-05-26 03:29:46",
        "summary": "是什么\n\n\n类似工厂模式\n将原始对象传入, 使用object()重新复制一个基于父类的对象\n\n代码模板\n\t\t// 核心代码\n        function createAnother(origin) {\n\n            let clone = Object(origin); // 核心代码\n\n            clone.sayHi = function () {\n\n                console.log(\"hi\");\n\n            }\n\n            return clone;\n\n        }\n\n        let father = {\n\n            name: 'jack',\n\n            friends: [\"f1\", \"f2\"]\n\n        }\n        let son = createAnother(father);\n\n        son.sayHi();\n\n\n缺点\n代码依旧不能重用"
    },
    {
        "title": "JavaScript原型式继承详解",
        "link": "https://www.logdict.com/archives/yuan-xing-shi-ji-cheng",
        "published": "2024-05-25 04:40:13",
        "summary": "是什么\n\n\n提供了自定义的方法, 这个方法在创建的时候将其原型对象指定成自己想要的原型(浅复制)\n在es5中其实已经实现了这个函数[[原型对象, 模式#^f0cd6b|使用Object.create()方法]]\n\n模板\nfunction object(o) { // // o是指传入的父类\n\n\tfunction F() { } // 创建一个函数对象\n\n\tF.prototype = o; // 指定当前函数为原型对象, 该函数作为实际子类传回\n\n\treturn new F();// new关键字调用F\n\n}\n\n\n\nfunction object(o) { // // o是指传入的父类\n\n\tfunction F() { } // 创建一个函数对象\n\n\tF.prototype = o; // 指定当前函数为原型对象, 该函数作为实际子类传回\n\n\treturn new F();// new关键字调用F\n\n}\n\n\n\nlet father = {\n\n\tname: \"jerry\",\n\n\tfriends: [\"tom\"], // 引用类型会在所有子类共享\n\n\tsayName: function () {\n\n\t\tconsole.log(this.name);\n\n\t}\n\n}\n\n\n\n// 扩展父类\n\n// son1\n\nlet son1 = object(father);\n\nconsole.log(son1);// console.log(Object.getPrototypeOf(son1));\n\n// son2\n\nlet son2 = object(father);\n\nconsole.log(son2);\n\n\n\n因是字面量声明, 所以无法用.prototype该原型受保护, 但可以在实例上直接添加, 遮盖原型上的内容, 如son1.属性\n等同于es5 Object.create()\n\n缺点\n和原型模式一样, 引用类型仍然会在对象之间共享, 参考[[原型对象, 模式]]"
    },
    {
        "title": "JavaScript组合继承",
        "link": "https://www.logdict.com/archives/zu-he-ji-cheng",
        "published": "2024-05-25 03:14:29",
        "summary": "是什么\n综合了[[原型链继承]]和[[盗用构造函数]]继承, 也叫做伪经典继承\n\n用原型链继承, 继承原型的属性方法\n用盗用构造函数, 继承实例属性, 这里的实例其实就是除去原型对象外的所有对象\n\n实现代码\n   function Father(name){\n\n        this.name = name;\n\n   }\n\n   Father.prototype.sayName = function(){\n\n    console.log(this.name);\n\n   }\n\n   function Son(name){\n\n    Father.call(this, name);// 盗用构造函数继承原父类对象并传参\n\n   }\n\n   Son.prototype = new Father(); // 原型链继承原父类的原型对象上的属性和方法\n\n  \n\n   let s = new Son(\"JSON\");\n\n   console.log(s);\n\n\n\n\n注意点\n\n[[盗用构造函数]]那部分是无法给父类对象赋值, 所以出现了下面运行情况name: undefined\n\n"
    },
    {
        "title": "JavaScript原型对象详解",
        "link": "https://www.logdict.com/archives/yuan-xing-mo-shi",
        "published": "2024-05-24 13:53:26",
        "summary": "通俗解释\n\n原型对象就是一个对象, 也叫做原型模式\n当创建一个function Fname(){}函数, 这个函数就是一个对象, 这个对象与之对应的在背后创建了一个原型对象, 并用属性prototype指向他自己的原型对象\n\n   // 对象构造函数\n\n   function Father(name, age){\n\n    this.name = name;\n\n    this.age = age;\n\n   }\n\n   // 使用原型对象赋值\n\n   Father.prototype.sex = \"man\";\n\n   Father.prototype.country = \"china\";\n\n   Father.prototype.sayName = function(){\n\n    console.log(this.name);\n\n   }\n\n   // 验证\n\n   let f = new Father(\"jack\", 18);\n\n   console.log(f);\n\n\n理解原型对象\n\n任何一个函数本身就是一个对象\n在创建函数对象的时候都与之对应的在背后创建了一个原型对象, 并且在函数自身对象中用prototype属性指向该原型对象, 如上图\n原型对象同时也用一个属性constructor指回原函数对象\n\n原型对象其也有原型对象, 即object, 原型对象的终点是object对象, object的原型对象是null对象\n\n原型对象, 对象, 实例对象三者通用关系图\n\n任何一个对象都有原型对象, 只是函数原型对象比较特殊, 在创建函数的时候就创建了一个对应的原型对象\n\n如何检查\nJavaScript自身提供了一些方法用于检查实例对象与原型对象之间的关系\n1. 要检查的对象.prototype.isProtypeOf(\"要检查的实例对象\");\n2. Object.getPrototypeOf(\"要检查的实例对象\") == 对象.prototype;\n\n如何重写原型\n\nJavaScript提供了方法, 用来更换实例对象的原型对象\nObject.setPrototypeOf(要重写的目标, 新原型), 不过该方法会造成性能下降\n\nlet father = {\n\n    name: 'jack'\n\n   }\n\n   let newPrototype = {\n\n    age: \"19\"\n\n   }\n\n   // 重写前的原型对象\n\n   console.log(\"重写前\");\n\n   console.log(father); // 默认指向object\n\n   console.log(\"重写后\");\n\n   Object.setPrototypeOf(father, newPrototype);\n\n   console.log(father);\n\n\n\n\n直接在创建对象的时候指定一个原型, Object.create(要指定的原型,事先声明好), 该方法创建了一个对象, 并在()指定了原型对象\n\nlet specialPrototype = {\n\n    age: \"19\"\n\n   }\n\n   // 创建对象的同时指定原型对象\n\n   let father = Object.create(specialPrototype);\n\n   console.log(father);\n\n原型层级\n\n属性和方法的搜索规则, 实例->原型搜索, 查到即停止, 也叫做遮蔽, 意思如原型上有的属性和实例上也有的属性重复, 用实例上的\n\n"
    },
    {
        "title": "JavaScript盗用构造函数继承",
        "link": "https://www.logdict.com/archives/dao-yong-gou-zao-han-shu",
        "published": "2024-05-24 12:23:40",
        "summary": "什么是盗用构造函数\n\n别名对象伪装 经典继承\n子类构造函数中调用父类构造函数\n\n相当于子类中运行了父类的所有的代码\n使用父类.call()或apply()\n\n\n\n代码\nfunction Father(){\n\tthis.colors = [\"blue\",\"red\"]\n}\nfunction Son(){\n\t// 核心\n\tFather.call(this);\n\t\n}\nlet sonIns = new Son();\nsonIns.colors.push(\"black\"); \n// 此时父类继承+自有的\n\nlet sonIns2 = new Son();\n// 此时从父类继承\n\n优点和缺点\n\n可以向父类传递参数\n\nfunction Father(name){\n\tthis.colors = [\"blue\",\"red\"];\n\tthis.name = name;\n}\nfunction Son(){\n\t// 核心\n\tFather.call(this, \"传递的名字\");\n\t\n}\n\n\n子类无法访问父类原型对象定义的方法\n\nfunction Father(name){\n\n    this.colors = [\"blue\",\"red\"];\n\n    this.name = name;\n\n    }\n\n    Father.prototype.sayName = function(){\n\n        console.log(\"父类原型上定义的方法\");\n\n    }\n\n    function Son(){\n\n        // 核心\n\n        Father.call(this, \"传递的名字\");\n\n        console.log(this);\n\n    }\n\n    let s1 = new Son();\n\n    s1.sayName(); // 无法访问报错\n\n\n必须在构造函数中定义方法, 无法重用\n\n第一点, 意思是子类中继承过来的方法, 其实还是在子类中的运行了一遍, 而不是父类那个, 类似从子类插入了一段代码实现了继承\n第二点, 父类原型上的内容无法访问, 无法重用\n\n\n\nfunction Father(name){\n\n    this.colors = [\"blue\",\"red\"];\n\n    this.name = name;\n\n    }\n\n    Father.prototype.sayName = function(){\n\n        console.log(\"父类原型上定义的方法\");\n\n    }\n\n    function Son(){\n\n        // 核心\n\n        Father.call(this, \"传递的名字\");\n\n    }\n\n    let s1 = new Son();\n\n    // 验证盗用构造函数原型继承之间的关系\n\n    console.log(\"输出Father原型\");\n\n    console.log(Object.getPrototypeOf(Son));// 输出Father原型\n\n    console.log(\"输出Son原型\");\n\n    console.log(Object.getPrototypeOf(Son));// 输出son原型\n\n    console.log(\"输出s1原型\");\n\n    console.log(Object.getPrototypeOf(s1));// 输出s1原型\n\n\n\n很明显, 子类和父类没有实际的原型链指向关系, 其所谓的继承只是从父类把其代码盗用复制了一份, 也解释子类无法访问父类定义在原型上的内容, 因为根本没有任何原型链\n"
    },
    {
        "title": "JavaScrip原型链继承详解",
        "link": "https://www.logdict.com/archives/javascripyuan-xing-lian-ji-cheng",
        "published": "2024-05-23 10:37:07",
        "summary": "原型链继承是什么\n\n将子类的原型对象指向父类的原型对象\n\n即人为的把子类的原型对象指向父类对象子类.prototype = new ?\n\n\n\n实现代码\nfunction Father(){\n\n    this.fatherName = \"father\";\n\n    }\n\n    Father.prototype.getFatherName = function(){\n\n        return this.fatherName;\n\n    }\n\n    function Son(){\n\n        let sonName = \"son\";\n\n    }\n\n    Son.prototype.getSonName = function(){\n\n        return this.sonName;\n\n    }\n\n  \n\n    // 核心 实现继承关键->将子类的原型对象指向父类的原型对象, 就是通过这个语句实现\n\n    Son.prototype = new Father();\n\n  \n\n    let f = new Father();\n\n    console.log(\"父类获取名字\");\n\n    console.log(f.getFatherName());\n\n    let sonInstance = new Son();\n\n    console.log(\"子类获取父类名字\");\n\n    console.log(sonInstance.getFatherName());\n\n\n\n实现原理图\n\n覆写父类实现\n\n在原型赋值之后再实现\n\n注意的点\n\n不能用字面量的方法去给原型赋值, 会导致son prototype->father prototype链接断裂\n\n\nson.prototype = {\n\n}\n\n存在的问题\n\n引用类型的变量在各个实例间共享\n无法向父类传参\n所以这个不常用\n"
    },
    {
        "title": "JavaScrip原型对象",
        "link": "https://www.logdict.com/archives/javascripyuan-xing-mo-shi",
        "published": "2024-05-23 03:55:36",
        "summary": "\n使用构造函数方法创建一个对象\n对象会自动创建一个与之对应的prototype原型对象, 并且用函数名-通常大写.prototype可以访问, 可以添加属性或方法\n这个对象中的属性可以在对象的实例, 构造函数之间共享!\n\n构造函数prototype属性-------->原型对象\n\t\t  ↑\t\t\t   ↑    constructor属性\n\t\t  ↑            ↑    ↓ [[prototype]] --->obj \n\t\t  -------------------\n\t\t\t\t\t   ↑ \n\t\t\t\t\t   其他原型对象实例prototype属性\n"
    },
    {
        "title": "JavaScrip内存优化的方法",
        "link": "https://www.logdict.com/archives/javascripnei-cun-you-hua-de-fang-fa",
        "published": "2024-05-22 18:27:47",
        "summary": "\n如果数据不再需要, 将数据设置为null 解除引用\n使用const let关键字声明变量, 有助于垃圾回收机制\n防止出现隐藏类和隐藏方法, 即类的方法或属性提前声明且初始化好默认值, 减少在对象创建时候动态添加方法, 造成性能损失\n防止内存泄漏, 如不写关键字的声明变量, 定时器不及时清除\n优化内存垃圾回收机制, 减少内存垃圾回收运行次数, 比如建立一个对象池, 统一管理对象. 减少动态对象创建的次数, 使用已经创建好的对象接受\n"
    },
    {
        "title": "可以在搜索结果中屏蔽指定网站的插件",
        "link": "https://www.logdict.com/archives/zai-sou-suo-jie-guo-zhong-ping-bi-zhi-ding-wang-zhan",
        "published": "2024-05-19 04:45:00",
        "summary": "背景\n在搜索引擎中搜索问题, 往往充斥各种无效内容\n比如搜个技术类的问题, 前几页CSDN, 百度百家号, 百度经验, 百度知道, 腾讯云各类云爬的水文\nCSDN基本都是复制粘贴的, 甚至格式都乱码了, 虽然我以前也干过\n要复制粘贴无所谓, 至少把格式改一改, 要不就自己写一遍简略版本, 嫌麻烦直接贴解决了什么问题+网址贴上去做个索引也行, 别管失不失效, 将来大概率也不会再看\n屏蔽指定网站插件\n以前我都是用搜索引擎高级用法-关键字把CSDN之流从搜索结果中排除掉\n但感觉应该有类似插件, 一直没去找\n现在找到了一款\n安装tampermonkey油猴插件, 一个Chrome, Edge浏览器扩展, 一个脚本运行平台\n之前曾经用过, 装过一个直接获取百度网盘分享文件下载地址的脚本\n装好后直接搜索Google Hit Hider by Domain (Search Filter / Block Sites) by Jefferson “jscher2000” Scher\n这个脚本可以在搜索结果增加一个block按钮, 可快速屏蔽指定网站搜索结果\n\n默认的话, 包括常见搜索引擎, 比如百度\n但是没有Bing CN特供版\n可以在设置中添加\n\n这样在搜索, 干净的多了, 随便搜索一个\n\nCSDN全屏蔽了"
    },
    {
        "title": "halo主题开发环境搭建",
        "link": "https://www.logdict.com/archives/halozhu-ti-kai-fa-huan-jing-da-jian",
        "published": "2024-05-18 15:49:00",
        "summary": "前言\n环境配置, 确实挺简单, 但是长时间不配, 现配确实挺耗时间, 毕竟现在很多开发工具内置自动下载环境, 想当年JDK还要自己手动配环境变量, 在此做个记录\n准备工作 | Halo 文档主要是这部分环境的配置\nJDK安装\nopen jdk 要求版本17 去存档的 OpenJDK GA 发行版 (java.net)下载相应的windows版本即可\n下载完毕解压\n配置环境变量\n\nwindows直接搜索环境变量\n系统变量->编辑Path->增加解压目录下的bin目录, eg.D:\\06-Green\\gradle-8.6\\bin\n\n搜索cmd, 命令行输入java, 显示一堆帮助信息就是配完了\nnodejs安装\n直接用Releases · coreybutler/nvm-windows (github.com), 专门管理多版本nodejs工具, 可随时切换, 一键安装\n安装完后nvm install 指定nodejs版本号\n使用nvm use 版本号切换nodejs版本\nnvm list查看当前使用的nodejs版本\ncmd下输入node判断是否安装成功\npnpm安装\nnpm install -g pnpm\ngradle安装\n下载Gradle | Releases\n下载后配置环境变量同jdk安装, path eg.D:\\06-Green\\gradle-8.6\\bin\nhalo运行\n克隆项目, 参考开发环境运行 | Halo 文档\n单纯开发主题就没必要用IDEA运行了\n直接项目根目录cmd运行gradlew.bat downloadPluginPresets\nUI服务也是根目录cmd运行gradlew.bat :ui:dev\n数据, 主题, 配置文件目录在C:\\Users\\用户名\\halo2-dev\\\n然后localhost:8090就可以了\nC:\\Users\\用户名\\halo2-dev\\themes 下新建主题\n后记\n主题开发其实很简单就是套数据, halo用的模板引擎是Thymeleaf, 早期记得是用的freemarker, 那个引擎有个缺点不能实时显示\n各个语言的模板引擎语法基本都差不了哪去\n如果要是移植主题更简单, 别人的样式和JS交互都写好了, 关键是看懂那些JS, CSS, 毕竟现在前端工程化以后出了好多新的花样, 各种新晋的预编译语言, 框架, 包管理工具, 比如sass typescript npm pnpm yarn …, 后端一般看到这些就头疼, js那灵活性, 看别人的代码简直是一种折磨…"
    },
    {
        "title": "Outlook关闭垃圾邮件过滤的方法",
        "link": "https://www.logdict.com/archives/outlookguan-bi-la-ji-you-jian-guo-lu-de-fang-fa",
        "published": "2024-05-16 12:56:00",
        "summary": "背景\nOutlook邮箱垃圾过滤规则过于严格, 可以说是奇葩, 自家的域名的邮件都能给扔到垃圾邮箱里, 但是官方并没有给出解决, 包括英文区, 都是模模糊糊的机械回应\n但可以明确的是\n\nWeb端没有关闭入口\nWin10邮件客户端UWP版没有关闭入口\n新版套壳网页的更没有\n即便你设置了自定义规则也不管用, 因为Outlook的垃圾过滤规则在自定义规则执行前做的过滤\n\n解决方法一-待验证\n使用Outlook桌面版即exe版, 即以前和Office捆绑的那个版本, 早期版本可以打开在开始->垃圾邮件里配置, 如图\n\noffice2016 2019版本, 这个设置被隐藏的特别深, 不仔细找都找不到, 具体要随便右键点击一个右键, 在弹出框里面选择, 如图\n\n不过, 这个方法据说是可以把垃圾邮箱规则设置同步到服务端, 但具体没测试过到底可不可行\n解决方法二-间接法\n这个方法需要借助Microsoft Power Automate | 主页创建工作流\n\n当邮件进入垃圾邮件箱里触发工作流, 该工作流会将垃圾邮件移动回收件箱\n\n登陆后在右边选择工作流\n\n新建流, 创建如下工作流\n\n\n注: 选择操作类型时, 搜索Outlook, 选择outlook.com, 如果你不是office365不要选带有365后缀的\n注: 图上第二个操作转发电子邮件, 不用配\n\n因为我的邮件是通过转发到其他服务商的邮箱做管理的, 配合Outlook设置里的转发用的\n这个工作流即便执行完毕, 把垃圾邮件移动回收件箱, 也不会触发Outlook的自动转发, 所以在Microsoft Power Automate工作流里面我单配了一个转发即第二个操作, 确保垃圾邮件回到收件箱之后也能转发\n\n\n\n做好上面配置, 可以自己发个垃圾邮件测试一下, 当垃圾邮件箱里有邮件就会移动回收件箱\n可以说, 这个方法是比较确定的, 可以间接解决Outlook垃圾邮件过滤规则过于严苛的问题\n但是这个方法收不收费不确定, Microsoft Power Automate有付费版, 但是默认是free版, 这个free版到底哪些操作免费, 是否有额度, 看官方文档写的挺模糊\n关于Outlook的自动转发\nOutlook可以设置自动转发, 即收到邮件转发给其他邮箱, 但是注意的一点, Outlook的自动转发不同于QQ邮箱, Gmail.\nQQ邮箱, Gmail等邮箱的自动转发其实是代发\n代发和自动转发的区别就是, 代发把邮件转发后, 发件人和收件人仍然按原始邮件显示\n比如下图, 代发会显示代发, 这封邮件是发给Gmail的, 但是Gmail设置了自动转发给我QQ邮箱\n但转发给我的QQ邮箱后显示收件人和发件人没有变, 并且标明了代发\n\n转发则不同, 转发后的发件人变了, 其本质只是转发了内容, 发件人变了\n结语\n用Outlook的, 如果没有特殊需要, 尽快迁移到其他邮箱\nOutlook还有一个缺点, 给别人发邮件会默认显示微软账户的姓和名, 邮箱端无法设定发信人昵称\n也就是说你如果把你微软账户设置了成了真名, 给别人发邮件会带着真名.\n什么是微软账户, 就是你Windows10/11登陆的在线账户, 登录后显示的账户名…, 比如开机默认闪过的那个名"
    },
    {
        "title": "freshrss报错The web server seems to be incorrectly configured for cookies required for PHP sessions",
        "link": "https://www.logdict.com/archives/1716113209763",
        "published": "2024-05-14 12:11:00",
        "summary": "背景\n\n更换域名后反代的freshrss登陆提示The web server seems to be incorrectly configured for cookies required for PHP sessions, Chrome开发者工具显示403 forbidden\n我的域名从xxx.com/freshrss/更换为ccc.com/freshrss/, 只是更改了nginx的server_name字段, 只有这一处改动, 按正常来说不会出现错误\n自我改动完毕, 只要登陆就提示The web server seems to be incorrectly configured for cookies required for PHP sessions!\n\n解决\n\n没有别的解决办法, 按照官方文档配置FreshRSS/Docker at edge · FreshRSS/FreshRSS (github.com)配置的代理子目录\n最早issue就有人提出来, 解决方法是增加proxy_set_header X-Forwarded-Prefix /freshrss/;并与location /freshrss/ 保持一致, 依旧报错\n尝试检查config.php的base_url并无错误, 因为当我发现登陆不上, 就切回旧域名的conf了\n最后解决方案, config.php的auth_type改为none, 即可无密码直接进入后台, 进入后导出订阅数据, 删除docker映射目录的所有文件, 重新创建容器docker-compose up --force-recreate -d\n最好不要放在子目录下, 感觉很容易出现这个问题, 官方issue自从2018年有就有这个问题的讨论, 一直到2024年依旧会出现这个问题, 感觉这个问题一直有偶发性. 另外可以按照官方的推荐不用nginx作为反向代理\n\n相关讨论\n[BUG] Blast! The web server seems to be incorrectly configured for cookies required for PHP sessions! · Issue #5259 · FreshRSS/FreshRSS (github.com)\ndocker-compose: can’t connect to DB · Issue #3198 · FreshRSS/FreshRSS (github.com)"
    },
    {
        "title": "解决MariaDB或MySQL在本地不输密码或输错密码也可以登陆现象",
        "link": "https://www.logdict.com/archives/jie-jue-mariadbzai-ben-di-shu-cuo-mi-ma-ye-neng-deng-lu",
        "published": "2024-05-14 10:53:00",
        "summary": "背景\n以前一直用mysql低版本, 换了mariadb以后本想测试一下root密码正确性, 结果偶尔随便输了一个密码竟然也能进去\n方案一\n\n适用于Mariadb10.4及其更高版本\n\n在安装的时候默认给本地root账户开启了\"plugin\": \"unix_socket\"}这个插件允许您从控制台进入而无需密码。但也禁用使用密码进行身份验证，并且无法从其他客户端进行连接。\n官方的介绍参考如下MariaDB 10.4 中的身份验证 - MariaDB\n查看是否启用SHOW GRANTS FOR 'root'@'localhost';\n| GRANT ALL PRIVILEGES ON *.* TO `root`@`localhost` IDENTIFIED VIA mysql_native_password USING '*xx236E2C12D764CA78xx' OR unix_socket WITH GRANT OPTION |\n| GRANT PROXY ON ''@'%' TO 'root'@'localhost' WITH GRANT OPTION  \n\n\nVIA mysql_native_password USING '*xx236E2C12D764CA78xx' OR unix_socket就表示可以使用密码或unix_socket两种验证方式\n\n根据官方文档MariaDB 10.4 中的身份验证 - MariaDB解决方案如下\nALTER USER root@localhost IDENTIFIED VIA mysql_native_password USING PASSWORD(\"verysecret\");\n\n方案二\n\n适用于10.4以下低版本\n\n网上还有一种方法是查询SELECT host, user, password, plugin FROM mysql.user, 并使用更新语句, 更新plugin为mysql_native_password, 已失效\n但此语句并看不出来启用了unix_socket\n+-----------+-------------+-------------------------------------------+-----------------------+\n| Host      | User        | Password                                  | plugin                |\n+-----------+-------------+-------------------------------------------+-----------------------+\n| localhost | mariadb.sys |                                           | mysql_native_password |\n| localhost | root        | *42C12D764CA78F                           | mysql_native_password |\n| localhost | mysql       | invalid                                   | mysql_native_password |\n| %         | root        | *8BC300DDAFABA4                           | mysql_native_password |\n| %         | halo        | *466D4A029FAE764CA7                       | mysql_native_password |\n+-----------+-------------+-------------------------------------------+-----------------------+\n\n\n依据官方说明至少在10.4版本mysql.user已经变成了视图, 通过更新plugin字段值已经失效, 如低版本可以尝试如下\nSET PASSWORD FOR 'root'@'localhost' = PASSWORD('MyNewPass');\nUPDATE mysql.user SET plugin = '' WHERE user = 'root' AND host = 'localhost';\nFLUSH PRIVILEGES;\n"
    },
    {
        "title": "搜索引擎高级用法",
        "link": "https://www.logdict.com/archives/sou-suo-yin-qing-gao-ji-yong-fa",
        "published": "2024-05-10 09:17:00",
        "summary": "背景\n尽管AI普及便利，搜索引擎高级搜索必不可少，可提供更精准、深度的信息，满足特定需求。\n用法\n完全匹配搜索\n\n\"关键词\"使用引号搜索包裹, 会精确匹配, 将含有关键字的页面返回\n\n排除特定关键词\n\n\"关键词 -排除内容1 -排除内容2\"会在搜索结果内排除指定内容\n\n比如排除-CSDN\n\n\n\n搜索指定站点\n\n关键词 site:制定网站域名 搜索指定网站下的内容\n\n搜索指定文件类型\n\n关键词 filetype:文件类型 搜索特定文件类型的内容\n一版用来搜索PDF电子书比较方便\n\n使用通配符\n\n关键词*通配符匹配\n\n使用相关关键字\n\n关键词 related:网站域名 根据关键词, 搜索特定网站相关的内容\n\n使用运算符\nand or not, 类似逻辑运算符"
    },
    {
        "title": "国内服务器未备案使用域名443访问的方法",
        "link": "https://www.logdict.com/archives/guo-nei-fu-wu-qi-wu-fa-shi-yong-yu-ming-de-jie-jue-fang-fa",
        "published": "2024-05-08 19:39:00",
        "summary": "背景\n\n国内服务器必须使用备案域名, 甚至不在服务器和域名不在同一个厂商, 都会被拦截\n\n解决方法\n方法1\n\n有一台国外服务器\n有一个国外域名服务商的域名\n国外服务器安装NGINX反向代理国内服务器非443和80端口, 只对部分厂商有效, 一些厂商仍然会拦截\n缺点: 经过国外服务器中转访问速度慢, 且有不可知风险导致无法访问\n\n方法2\n\n有一台国外服务器\n有一个国外域名服务商的域名\n国外和国内服务器安装NGINX\n国内服务器Nginx给IP配置ssl证书监听443端口, 参考通过Zerossl给IP申请免费SSL证书 | Byte Voyage\n国外服务器443端口绑定域名, 配置反代国内服务器443\n实测不会被拦截\n缺点: 经过国外服务器中转访问速度慢, 且有不可知风险导致无法访问, 但对于一般站点速度也够用\n\n方法3\n\n使用Cloudflare Tunnel实现内网穿透\nwip\n\n方案4\n\n国内和国外服务器部署frp (gofrp.org)实现内网穿透\nwip\n\n方案3和4适用于在无公网IP的家中部署web服务, 本质都是反代+内网穿透"
    },
    {
        "title": "Nginx过滤指定日志不输出",
        "link": "https://www.logdict.com/archives/nginxguo-lu-xin-tiao-ri-zhi",
        "published": "2024-05-08 14:53:34",
        "summary": "概述\n一些Nginx日志需要过滤, 比如监控经常以分钟为单位检测网站导致日志过多\n解决方法\n往.conf文件的http节点下增加如下\n# 定义格式化日志main, 此处为NGINX默认日志格式\nlog_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n\n                     '$status $body_bytes_sent \"$http_referer\" '\n\n                     '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n# 生成health Map变量, 默认1, 匹配到$http_user_agent 含有以Uptime-Kuma开头的则设置为0\nmap $http_user_agent $health {\n\n\t~^Uptime-Kuma 0;\n\n\tdefault 1;\n\n}\n# 如果按main定义的规则, 如果$health不等于1则不输出到日志文件, 该内容也可到server节点下\naccess_log /usr/local/nginx/logs/main-and-freshrss.log main if=$health;\n\n使用if判断\n以下逻辑其实是或的实现, 但nginx中并没有逻辑判断, 只能采取折中法\n# 默认写入\n\n    set $write 1;\n\n    # 是否将主题静态资源访问日志写入\n\n    if ($request ~* \".*/themes/.*\" ){\n\n        set $write 0;\n\n    }\n\n    # 是否将uptime-kuma心跳日志写入\n\n    if ($health = \"0\"){\n\n        set $write 0;\n\n    }\n\n    access_log /usr/local/nginx/logs/main-and-freshrss.log main if=$write;\n\n    error_log /usr/local/nginx/logs/main-and-freshrss.error.log;\n\n参考资料\n\nnginx if判断&&和||写法_nginx if &&-CSDN博客\n从Nginx过滤打印user-agent为clb-healthcheck的日志聊聊Nginx的日志自定义打印 | 二丫讲梵 (eryajf.net)\nModule ngx_http_rewrite_module (nginx.org)\n"
    },
    {
        "title": "Nginx源码编译安装",
        "link": "https://www.logdict.com/archives/nginxyuan-ma-bian-yi-an-zhuang",
        "published": "2024-05-08 06:59:28",
        "summary": "创建安装目录\ncd usr/local/\nmkdir nginx\n\n下载源代码\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\n\ntar -xzvf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n\n配置\n配置常见模块\n./configure \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_gzip_static_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_v2_module \\\n--with-http_sub_module \\\n--with-http_secure_link_module \\\n--with-http_auth_request_module \\\n--with-pcre \\\n--with-threads \\\n--with-http_image_filter_module \\\n--with-stream\n--with-http_websocket_module\n\n配置报错则安装可能缺少pcre库\napt-get install libpcre3 libpcre3-dev\nGD（Graphics Draw）库\napt-get install libgd-dev\n\n缺少c编译器\napt-get install gcc //针对debian\n\n缺少openssl\napt-get install libssl-dev\n\n缺少make\napt-get install make\n\n编译与安装\n编译并安装\nmake && make install\nuseradd -m typecho\n\n启动\n/usr/local/nginx/sbin/nginx\n\n创建安装目录\n\n\n下载源代码\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\n\ntar -xzvf nginx-1.24.0.tar.gz\nW2AKopdluxPvtYsa4lqegwlD2Oq7qRO7UQhQuoMP\ncd nginx-1.24.0\n\n编译配置\n./configure \\\n--prefix=/usr/local/nginx \\\n--with-http_ssl_module \\\n--with-http_gzip_static_module \\\n--with-http_stub_status_module \\\n--with-http_realip_module \\\n--with-http_v2_module \\\n--with-http_sub_module \\\n--with-http_secure_link_module \\\n--with-http_auth_request_module \\\n--with-pcre \\\n--with-threads \\\n--with-http_image_filter_module \\\n--with-stream\n--with-http_websocket_module\n\n\n\n配置报错则安装可能缺少pcre库\napt-get install libpcre3 libpcre3-dev\nGD（Graphics Draw）库\napt-get install libgd-dev\n\n缺少c编译器\napt-get install gcc //针对debian\n\n缺少openssl\napt-get install libssl-dev\n\n缺少make\napt-get install make\n\n编译并安装\nmake\nmake install\nuseradd -m typecho\n\n启动\n/usr/local/nginx/sbin/nginx\n\n配置成系统服务\n\ndebian存放位置 /usr/lib/systemd/system\nnginx.service文件内容\n\n[Unit]\nDescription=nginx web service\nDocumentation=http://nginx.org/en/docs/\nAfter=network.target\n\n[Service]\nType=forking\nPIDFile=/usr/local/nginx/logs/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s stop\nPrivateTmp=true\n\n[Install]\n\n\n\n\n\n\n\n参考文档\n\n一文教你怎么在Debian上编译安装Nginx（步骤详解） (gxlsystem.com)\n\n\n"
    },
    {
        "title": "通过Zerossl给IP申请免费SSL证书",
        "link": "https://www.logdict.com/archives/tong-guo-zerosslgei-ipshen-qing-mian-fei-sslzheng-shu",
        "published": "2024-05-07 15:55:00",
        "summary": "使用Zerossl可以给IP申请SSL证书, 以https://ip访问, 可解决某些特殊情况下强制需要SSL验证的情况, 但手上无域名, 如安卓系统下使用某些服务访问只支持https\n要求\n\nZeroSSL支持为IP地址颁发免费证书有效期90天, 但有以下条件\n\n无法通过acme.sh自动签发, 只能手动申请,后自己上传至服务器\n不会为保留的 IP 地址颁发证书\n仅支持HTTP验证\n\n\n\n步骤\n\n注册并登录ZeroSSL, 填写你的IP\n\n选择90天免费计划\n\n选择http验证, 按照要求创建目录/.well-known/pki-validation/将验证文件上传, 确保http://ip//.well-known/pki-validation/xxxx.txt`可访问到\n\n参考资料\n\nIs It Possible To Generate a SSL Certificate for an IP Address? – ZeroSSL\n\n\n"
    },
    {
        "title": "使用nginx代理转发jsdelivr实现github图床并用picgo上传",
        "link": "https://www.logdict.com/archives/shi-yong-nginxdai-li-zhuan-fa-jsdelivrshi-xian-githubtu-chuang",
        "published": "2024-05-06 02:15:00",
        "summary": "jsDelivr是一个免费且开源的CDN服务网站，它提供了包括JavaScript库、CSS框架、字体等Web上常用的静态资源，并且支持全球CDN加速\njsDelivr特别适合于中国大陆地区的用户，因为它提供了国内CDN加速，解决了访问国外资源时的速度问题。此外，jsDelivr还提供了npm、GitHub__、WordPress__等项目的镜像服务，使得开发者可以更方便地使用和管理他们的资源\n但jsDelivr在中国大陆的访问速度也不是很乐观\n如果你有一台国外的服务器, 可以通过该服务器转发jsDelivr, 以下介绍配置方法\n修改nginx配置\n修改nginx的.conf配置文件在http节点增加如下\nproxy_cache_path /tmp/cache levels=1:2 keys_zone=mycache:100m inactive=1d max_size=10g;\n\nserver {\n\t# 替换\n    # 端口和域名\n    listen 443 ssl;\n    server_name 你的域名;\n    \n\t# 替换\n\t# 域名证书配置\n    ssl_certificate /ssl/fullchain.pem;\n    ssl_certificate_key /ssl/key.pem;\n    \n    ssl_session_timeout 5m;\n\tssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n\tclient_max_body_size 2m;\n    client_header_buffer_size 128k;\n    client_body_buffer_size 1m;\n    proxy_buffer_size 32k;\n    proxy_buffers 64 32k;\n    proxy_busy_buffers_size 1m;\n    proxy_temp_file_write_size 512k;\n    \n    # 图床映射，添加自己的图床地址即可\n\n    location / {\n\t\t# 替换\n        proxy_pass https://cdn.jsdelivr.net/gh/你的github用户名/存放图片的仓库/;\n\n        proxy_cache mycache;\n\n        expires 30d;\n\n    }\n}\n\n\n下载picgo\nPicGo: 一个用于快速上传图片并获取图片 URL 链接的工具\nPicGo 本体支持如下图床：\n\n七牛图床 v1.0\n腾讯云 COS v4\\v5 版本 v1.1 & v1.5.0\n又拍云 v1.2.0\nGitHub v1.5.0\nSM.MS V2 v2.3.0-beta.0\n阿里云 OSS v1.6.0\nImgur v1.6.0\n\nReleases · Molunerfinn/PicGo (github.com)\n获取github token\nsettings->developer setting->generate\n\n填入picgo\n把存放图片的仓库名, 分支名, token, 存储路径, 自定义域名(上面nginx配置的域名)填入server_name 你的域名;\n\n\n参考文档\n\n通过Nginx自建jsdelivr反向代理 - 烈火灼冰 (4c43.work)\n\n\n"
    },
    {
        "title": "使用acme.sh通过cloudflare自动签发免费ssl证书",
        "link": "https://www.logdict.com/archives/acme.shshi-yong-cloudflarezi-dong-qian-fa-mian-fei-sslzheng-shu",
        "published": "2024-04-06 01:36:00",
        "summary": "通过acme.sh和cloudflare实现免费ssl证书自动签发\n下载acme.sh\ncurl https://get.acme.sh | sh -s email=你的邮箱\ncd ~/.acme.sh/\n\n获取Cloudflare密钥\nPreferences | Cloudflare\n\nLogin in\nEnter “Profile of your account” Page\nApply “Api Token”\nSelect Create Token\nSelect “Edit Zone DNS”\nGet and copy “Token”\nGet “Account ID” in OverView Page\n\n配置Acme.sh\n导入配置信息\n进入 用户目录下的 .acme.sh文件夹下, 如 cd /root/acme.sh\nexport CF_Token=\"\"\nexport CF_Account_ID=\"\"\nexport CF_Zone_ID=\"\"\n\n\n更换默认证书发行商并签发证书\n因默认证书发行服务商需要导入登陆相关秘钥, 所以更换为 letsencrypt\n./acme.sh --set-default-ca  --server  letsencrypt\n./acme.sh --issue --dns dns_cf -d 你的域名 \n\n修改nginx配置\n修改nginx的conf配置文件, 在 server字段里增加证书地址\n\n  ssl_certificate      /ssl存放地址/fullchain.pem;  \n  ssl_certificate_key  /ssl存放地址/cert_file/key.pem;\n\n\n安装\n将指定的证书安装下载到指定文件夹指定文件, 多个域名证书可以写入到单个文件\n安装\nacme.sh --install-cert -d bytevoyage.site -d *.bytevoyage.site \\\n\t\t--key-file   /ssl存放地址/key.pem  \\\n\t\t--fullchain-file /ssl存放地址/fullchain.pem \\\n\t\t--reloadcmd     \"service nginx force-reload\"\n\n\n查看定时任务\n安装完毕后会在系统内自动创建定时任务, 到期自动重新签发新的证书\n### 查看定时任务\nacme.sh --renew -d example.com --force\n\ncrontab -l  // View created tasks\n\n参考资料\n\ndnsapi · acmesh-official/acme.sh Wiki (github.com)\n使用ACME申请证书（证书自动续期） | 老潘的博客 (panyanbin.com)\n"
    },
    {
        "title": "Halo Theme AirCloud 主题文档",
        "link": "https://www.logdict.com/archives/AirCloud",
        "published": "2024-02-15 11:25:00",
        "summary": "主题简介该主题移植于Hexo-Theme-AirCloud,原作者 Xiaotao Nie ,感谢作者开发出该主题.以下引用原作者对主题的说明Hexo-Theme-AirCloud 是一个简洁轻量的 hexo 博客主题,旨在将中心放在博文本身.因此,默认没有大范围的主题色块,图片铺排等,也不要求每片博文配图,一方面这并不是我们记录知识的重点,另外一方面可能程序员群体并没有足够的素材,容易造成主题纠纷.通过不冗余的内容进行传达,比如默认没有博文摘要,因为不少开发者写博客的时候没有写博文摘要,如果从博客前一部分截取往往不能表达完整思想.主题下载安装完毕后,尽量手动保存一遍主题配置,防止出现未知错误主题依赖以下插件, 未安装会导致功能无法使用或者页面Not Found评论功能 plugin-comment-widget搜索功能 plugin-search-widget友链页面 plugin-links代码高亮 plugin-highlightjs应用市场安装推荐使用, 后续可收到更新Halo 安装应用市场插件( Halo>=2.10.0 已内置无需安装 )直接在应用市场中搜索 AirCloud 安装本地安装点击此处下载 或在 Release 页面 下载 最新主题包 (zip)进入 Halo 后台 -> 主题 (左侧面板)点击右上角 “主题”， 在弹出的窗口中选择 安装主题选择下载好的主题包（zip）安装完成后的主题将会出现在 “未安装” 内，点击 启用主题远程安装方式一Halo 应用市场网页直接进行远程安装：https://www.halo.run/store/apps/app-ZUaYf( 适用于 Halo>=2.6.0 且有外网访问地址)方法二复制地址 https://github.com/bit15k/halo-theme-aircloud/archive/refs/heads/main.zip进入Halo后台 -> 外观 -> 主题 (左侧面板)点击右上方 安装 按钮, 然后选择 远程下载在文本框中粘贴仓库地址后点击下载插件依赖所有插件均为可选，不安装则不会出现对应功能。部分插件可能已经预设在 Halo 内。部分插件主题尚未适配。评论功能 plugin-comment-widget搜索功能 plugin-search-widget友链页面 plugin-links代码高亮 plugin-highlightjs更多插件请参见：https://github.com/halo-sigs/awesome-halo功能说明基础设置可以设置主页侧边栏头像, 是否圆角, 侧边栏昵称, 以及页脚版权时间, 如图菜单设置遵循主题简洁性, 最多只显示主页, 归档, 标签 , 搜索, 友链, 留言, 关于这几项. 可按照喜好设置隐藏还是显示.其中搜索, 友链, 留言必须安装对应的插件, 否则不会显示或者提示页面无法找到等未知错误留言和关于页面开启, 需要手动创建并指定自定义页面作为留言板和关于页面. 如图统计设置支持设置显示页脚访问量, 访客量, 文章数, 分类数, 评论数. 支持原生和busuanzi统计. 如图文章设置支持设置文章界面是否进行首行缩进, 支持首页文章列表显示标签或显示分类. 如图社交设置开启后尾部会显示相应的图标, 支持GitHub, ZhiHu等多个社交. 如图评论设置支持原生halo评论系统和giscus评论系统, giscus评论系统参考https://giscus.app/zh-CN,将生成的代码填入即可.备案设置"
    },
    {
        "title": "使用docker是否使用防火墙",
        "link": "https://www.logdict.com/archives/shi-yong-docker-shi-fou-shi-yong-fang-huo-qiang",
        "published": "2022-10-17 19:59:00",
        "summary": "其实这个问题之前一直困扰着我，在请教技术大牛以及自己探讨以后，得到了一个答案，那就是docker不需要防火墙软件（注意这里指的是firewalld，iptables等防火墙软件而不是iptables服务）。\n防火墙软件是否对docker有影响？\ndocker引擎启动的时候会修改iptables规则，如果使用了防火墙软件，只要重启防火墙软件，则docker的规则就全部丢失，影响容器访问。\n如果必须使用防火墙需要注意什么？\n增删开放端口都必须通过动态命令添加，并且不应该重启防火墙。\n如果使用防火墙，部署业务映射了宿主机的端口，是否应该开放该端口？\n没有必要，因为不管你开不开放端口，都可以访问到服务。具体看下面的解释。\nDocker有多中网络模式，包括host，none,bridge ,overlay等。下面以Docker默认的bridge网络---Docker0来探讨Docker网络与iptables的关系。\nDocker0网络是Docker搭建的一个虚拟桥接网络，默认网关地址是172.17.0.1。Docker默认的网络是Docker0网络，也就意味着Docker中所有没有指定网络的容器都会加入到这个桥接网络中，网络中的容器可以互相通信。\n# ifconfig\ndocker0: flags=4163  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0\n        inet6 fe80::42:c0ff:febb:bb1e  \n\n\n容器对外请求数据\n如果Docker0中的容器请求外部的数据，那么他的数据包将会发送到网关172.17.0.1处。当数据包到达网关后，将会查询主机的路由表，确定数据包将从那个网卡发出。iptables负责对数据包进行snat转换，将原地址转为对应网卡的地址，因此容器对外是不可见的。\n外部对容器请求数据\n外部想要访问容器内的数据，首先需要将容器的端口映射到宿主机上。这时候docker会在iptables添加转发规则，把接收到的数据转发给容器。\n下图是数据包在iptable的传递流程\n\n\n创建一个端口映射的容器\n接下来我们查看一下容器数据包在iptable中怎么传递的 创建一个redis容器，将映射容器6379端口到宿主机36379端口。\n# docker run --name redistest -d -p 36379:6379 172.16.1.129/redis/3.0.7:v1.1\nb4c3fc06cdaccc2080f9e4845ebb2d2b789632ddaecb6e7b2e3bdf863c416014\n\n\n查看iptables的nat表\n# iptables -t nat -L\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination       \nDOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL  \n\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination       \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination       \nDOCKER     all  --  anywhere            !loopback/8           ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination       \nCATTLE_NAT_POSTROUTING  all  --  anywhere             anywhere          \nMASQUERADE  all  --  172.17.0.0/16        anywhere          \nMASQUERADE  all  --  172.18.0.0/16        anywhere          \nMASQUERADE  tcp  --  172.17.0.3           172.17.0.3           tcp dpt:6379\n\nChain DOCKER (2 references)\ntarget     prot opt source               destination       \nRETURN     all  --  anywhere             anywhere          \nRETURN     all  --  anywhere             anywhere          \nDNAT       tcp  --  anywhere             anywhere             tcp dpt:36379 to:172.17.0.3:6379\n\n\n可以看到iptables的nat表中有一条Docker子链 里面有一条数据\nDNAT       tcp  --  anywhere             anywhere             tcp dpt:36379 to:172.17.0.3:6379\n\n\n这条数据就是负责宿主机tcp36379端口映射到172.17.0.3:6379上。\nDocker子链被PREROUTING和OUTPUT链引用\n\nPREROUTING：数据包到达防火墙时改变包的目的地址\nOUTPUT：过滤所有本机产生的数据包（对源地址得数据包的过滤）\n\n也就是说外部对宿主机36379访问的数据包在nat这里被进行snat和pnat转换，目的地址转为172.17.0.3:6379。\n容器对外部访问的数据包也在这里进行dnat和pnat，将172.17.0.3:6379转为宿主机的36379端口\n查看iptables的filter表\n# iptables -L\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination       \nACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED\n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination       \nDOCKER-ISOLATION  all  --  anywhere             anywhere          \nDOCKER     all  --  anywhere             anywhere          \n\nDROP       all  --  anywhere             anywhere          \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination       \n\n\nChain DOCKER (2 references)\ntarget     prot opt source               destination       \nACCEPT     tcp  --  anywhere             172.17.0.3           tcp dpt:6379\n\nChain DOCKER-ISOLATION (1 references)\ntarget     prot opt source               destination       \nDROP       all  --  anywhere             anywhere          \nDROP       all  --  anywhere             anywhere          \nRETURN     all  --  anywhere             anywhere          \n\n\n\n里面同样有一个 DOCKER子链，被FORWARD链引用\n\nFORWARD链：过滤所有路过本机的数据包（源地址和目标地址都不是本机的数据包）\n\n也就是说经过nat切换地址以后，测试容器的数据包将会转发到172.17.0.3,而不是宿主机，过滤规则是Accept，也就是通过。\n通过上面的分析，可以知道数据到达宿主机的防火墙，直接就forward到容器了，没有执行到input流程，所以容器映射的宿主机端口不需要开放。\ndocker的部分网络功能是通过iptables转发来完成的，转发规则是docker进程启动后动态添加的，也就意味着如果你重启iptables，将会丢失docker的转发规则。\n有两种解决办法：\n\n动态添加iptables规则，然后保存到防火墙软件配置文件中\n\n动态添加iptables规则可以使规则立即生效（重启失效）\nsudo iptables -I INPUT 1 -p tcp --dport 46379 -j ACCEPT\n\n\n这条命令会将规则添加到input规则的第一位 ,-I参数指定插入位置。不要使用-A参数，该参数会将规则添加到input的最后一条，一般原来的最后一条都是reject规则，所以新插入的规则无法生效。\nsudo service iptables save\n\n\n\n重启iptable后重新启动docker\n\n影响：重启docker会导致全部容器重启，有可能造成短时间的业务故障。\n此方法不建议使用，如果已经重启防火墙，导致docker业务故障，使用下面命令重启dcoker。\nsystemctl restart docker\n\n"
    },
    {
        "title": "docker 常见命令汇总",
        "link": "https://www.logdict.com/archives/docker-chang-jian-ming-ling-hui-zong",
        "published": "2022-10-16 17:03:00",
        "summary": "# 安装 Docker\nyum -y install docker\n# 启动 Docker\nsystemctl start docker\n# 设置 Docker开机自启动\nsystemctl enable docker\n\n#-----------------------------其它 Docker常用命令-----------------------------\n# 查看版本号\ndocker -v\n# 查看 Docker 状态，报错时候使用\nsystemctl status docker\n# 停止 Docker\nsystemctl stop docker\n# 重启 Docker \nsystemctl restart docker \n# 查看正在运行的容器\ndocker ps \n# 查看所有容器，包括停止的容器\ndocker ps -a\n# 查看容器占用资源情况\ndocker stats\n# 查看容器的日志（可在这查看报错信息）\ndocker logs 容器名或ID\n# 启动已被停止的容器\ndocker start 容器名或ID\n# 停止运行中的容器\ndocker stop 容器名或ID\n# 重启容器\ndocker restart 容器名或ID\n------------------------安装docker compose-----------------------\n# 添加企业版附加包\nyum -y install epel-release\n# 安装pip\nyum -y install python-pip\n# 更新pip\npip install --upgrade pip\n# 安装docker-compose\npip install docker-compose\n\n# 查看docker compose的版本\ndocker-compose version\n\n删除全部容器\ndocker rm $(docker ps -aq)\ndocker rm $(docker ps -a -q) \n\n停止全部容器 \ndocker stop $(docker ps -a -q)\n\n删除全部镜像\ndocker rmi $(docker images -q) \n\n查看\ndocker ps -q\ndocker ps -a\n\n启动所有容器\ndocker start $(docker ps -a -q) \n\n删除所有容器\ndocker rm $(docker ps -a -q)\n\n重启docker-compose\ndocker-compose restart\n\n停止容器docker-compose\n需要进入相关目录\ndocker-compose down\n\n重新部署docker-compose\n需要进入相关目录\ndocker-compose up -d\n\n进入容器并以虚拟bash展现\ndocker exec -it seafile bash\ndocker exec -it wordpress bash\n\n查看容器内的IP返回结果\ndocker exec -it nextcloud netstat -anp\n\n查看容器内的IP\n需要进入虚拟bash\ncat /etc/hosts\ndocker inspect\ndocker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container_name_or_id \n\n获取容器名和IP\ndocker inspect -f '{{.Name}} - {{.NetworkSettings.IPAddress }}' $(docker ps -aq) \n\n获取docer compose容器名和IP\ndocker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) \n\n显示所有容器IP\ndocker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) \n\n查看指定容器的日志\ndocker logs -f nginx\n\n查看所有容器网络列表\ndocker network ls 查看网络列表\n\n查看对应网络的配置\ndocker network inspect <container id>\n\n复制指定容器内部文件到宿主机\ndocker cp nginx:/etc/nginx/conf.d/default.conf /\ndocker cp wordpress:/usr/local/etc/php/php.ini /\n\t\n\n"
    },
    {
        "title": "docker-compose 配置及基本应用场景",
        "link": "https://www.logdict.com/archives/docker-compose-pei-zhi-ji-ji-ben-ying-yong-chang-jing",
        "published": "2022-10-16 16:44:00",
        "summary": "什么是docker-compose\n\nCompose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。\n参考 https://www.runoob.com/docker/docker-compose.html\n\n简单来说就一个应用，分好几个容器，比如一个web应用除了web容器本身还有数据库容器，一共需要两个容器，就需要打包成一个配置文件统一管理和启动，好部署\n详细配置例子\n这个例子将nginx容器、halo容器、nextcoud容器、mysql容器、redis容器、wordpress容器打包到一起统一进行管理；其中nginx可以反向代理halo、nextcloud、wordpress容器，其中又有其他容器相互依赖使用的例子，比如nextcloud需要mysql\nversion: '2.0'\nservices:\n  nginx:\n    image: nginx:1.23.1\n    restart: always\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    expose:\n      - \"18-190\"\n      - \"210-220\"\n    #links:\n      #- seafile\n    container_name: nginx\n    privileged: true\n    volumes:\n      #- /nextcloud/nginx/conf:/etc/nginx- \n      - /nextcloud/nginx/ssl:/ssl\n      - /nextcloud/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - /nextcloud/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf\n      - /nextcloud/nginx/conf.d/halo.quinntian.com.conf:/etc/nginx/conf.d/halo.quinntian.com.conf\n      - /nextcloud/nginx/conf.d/cloud.quinntian.com.conf:/etc/nginx/conf.d/cloud.quinntian.com.conf\n      #- /opt/nginx/html:/usr/share/nginx/html\n      #- /opt/nginx/logs:/var/log/nginx\n      # - /opt/nginx/proxy.conf:/etc/nginx/proxy.conf\n    networks:\n      - nginx-net \n    links:\n      - nextcloud\n      # - halo\n      \n  \n  halo:\n    image: halohub/halo:1.5.4\n    container_name: halo\n    restart:  unless-stopped\n    ports: \n      - \"8090:8090\"  \n    volumes:\n      - /nextcloud/halo:/root/.halo\n    command:\n      - halohub/halo:1.5.4\n    networks:\n      - nginx-net   \n  nextcloud:\n    image: nextcloud\n    container_name: nextcloud\n    restart: always\n    ports: \n      - \"9090:80\"\n    volumes:\n      - /nextcloud/nextcloud-data/var/www/html:/var/www/html\n    networks:\n      - nginx-net\n    links:\n      - mysql\n      - redis\n     \n  mysql:\n    image: mysql\n    container_name: mysql\n    restart: always\n    ports: \n      - \"9091:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=yourpassword  # Requested, set the root's password of MySQL service.\n      - MYSQL_LOG_CONSOLE=true\n      # - MYSQL_USER=wordpress   \n      # - MYSQL_PASSWORD=yourpassword\n    volumes:\n      - /nextcloud/mysql/usr/local/mysql/conf:/etc/mysql/conf.d \n      - /nextcloud/mysql/usr/local/mysql/logs:/logs \n      - /nextcloud/mysql/usr/local/mysql/data:/var/lib/mysql\n    networks:\n      - nginx-net\n    \n  redis:\n    image: redis\n    container_name: redis\n    restart: always\n    ports: \n      - \"9092:6379\"\n    volumes:\n      - /nextcloud/redis/data:/data\n      - /nextcloud/redis/conf/redis.conf:/etc/redis/redis.conf\n    networks:\n      - nginx-net  \n    command:\n      # 以配置文件的方式启动 redis.conf\n      redis-server /etc/redis/redis.conf\n  wordpress:\n    image: wordpress:latest\n    container_name: wordpress\n    depends_on:\n      - mysql\n    ports:\n      - 9093:80\n    restart: always\n    networks:\n      - nginx-net\n    links:\n      - mysql\n    environment:\n      WORDPRESS_DB_HOST: mysql:3306\n      WORDPRESS_DB_USER: root\n      WORDPRESS_DB_PASSWORD: yourpassword\n    volumes:\n      - /nextcloud/wordpress/wp-content:/var/www/html/wp-content \n      - /nextcloud/wordpress/php-conf/php.ini:/usr/local/etc/php/php.ini     \nnetworks:\n  nginx-net: \n    driver: bridge\n\n具体标签解释说明\n\nservice 该标签底下设置一个服务底下的一个个容器，比如web容器，数据库容器\n\n节点名，比如nginx，代表nginx这个服务，格式是 - 节点名\nimage 表示拉取的docker镜像，一般的格式是 路径名:版本号\nrestart 表示重启的时机\nports 指定暴露给宿主机的端口号，一般格式是 -[绑定宿主机的端口号:容器内的端口号]\nexports 暴露给其他容器内的端口号 -一般格式是 -端口号\nlinks 用于指向其他服务\n该节点用于指定多个容器构成的服务的内网，比如容器1，指定一个名字，那么其他服务访问这个容器时候就不需要用IP地址，直接用这个名字即可；需要与networks标签配合使用，即要指定一个所属网络，格式是 -名称\nnetworks 用于配置该容器属于哪个网络，格式是-所属网络\ncontainer_name 容器名\nvolumes 映射宿主机和容器的路径\n\n格式是 宿主机路径:容器内路径\n\n\nenvironment 设置环境变量，即容器内的服务可以读取相关配置的环境变量\ncommand 设置相关命令，比如启动容器附带执行的命令\n\n\nnetwork 标签，用于配置整个大的服务的网络\n\n底下的第一个标签用于配置网络名\n\ndriver 表示该网络的网络模式\n\n\n\n\n"
    },
    {
        "title": "Next主题配置SEO站点验证",
        "link": "https://www.logdict.com/archives/next-zhu-ti-pei-zhi-seo-zhan-dian-yan-zheng",
        "published": "2022-10-15 15:38:00",
        "summary": "\n1. 获取站点验证\n谷歌\n\n登录谷歌站点管理https://search.google.com/search-console\n选择采用网址前缀验证-其他验证方式-HTML验证-将content内容复制到配置文件中\n\n百度\n\n登录谷歌站点管理https://search.google.com/search-console\n添加网站-输入网站信息-选择网站类型-验证网站-选择HTML验证-将content的内容复制到配置文件中\n\n必应\n同上，也可直接导入谷歌\n2. Next相关配置\nNext主题自带通过HTML验证，只需填入相关验证代码即可，在Next主题中搜索如下内容\n# Google Webmaster tools verification.\n# See: https://developers.google.com/search\ngoogle_site_verification: 复制content内容\n\n# Bing Webmaster tools verification.\n# See: https://www.bing.com/webmasters\nbing_site_verification: 复制content内容\n\n# Baidu Webmaster tools verification.\n# See: https://ziyuan.baidu.com/site\nbaidu_site_verification: 复制content内容\n"
    },
    {
        "title": "Next主题配置Gitalk评论系统",
        "link": "https://www.logdict.com/archives/next-zhu-ti-pei-zhi-gitalk-ping-lun-xi-tong",
        "published": "2022-10-14 05:41:00",
        "summary": "Next主题内置Gitalk评论系统，该评论系统存储在GitHub，不易丢失\n\n1. 创建一个oauth app\n\n先登录Github\nhttps://github.com/settings/apps 进入\n选择oauth app->new oauth app\n填写相关信息\n\n\n2. 修改主题配置文件\n\n创建成功后复制client_id和client_secret，填到配置文件中，配置文件在最下方\n配置文件说明如下\n\n# Gitalk\n# For more information: https://gitalk.github.io\ngitalk:\n  enable: true # 是否启用gitalk\n  github_id:  # Github的用户名 GitHub repo owner\n  repo:  # 存储gitalk issue评论仓库，一般使用你部署hexo的仓库，如果你是部署在服务器上的必须新建一个仓库用于存储Repository name to store issues\n  client_id:  # GitHub Application 上面的复制的Client ID\n  client_secret:  # GitHub Application Client Secret\n  admin_user:  # 仓库的拥有者GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  # When the official proxy is not available, you can change it to your own proxy address\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token # 不用改This is official proxy address\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n\n\n3. Gitalk说明\n\n配置成功后，点击任意的文章都会显示未生成issue，请联系管理员这是正常现象，登录账户创建就行，如果之前有很多文章需要手动依次访问创建issue\n如果关闭某篇文章或页面的评论，如下配置文章开头添加comments: false\n\n---\ntitle: Next主题配置Gitalk评论系统\ndate: 2022-01-08 21:16:39\nupdate:\ncategories:  \n    - [Hexo,Next]\ntags:\n    - Next\n    - Hexo\n    - Gitalk\n    - 主题配置\ncomments: false\n---\n"
    },
    {
        "title": "Hexo Next主题增加单独友链网页",
        "link": "https://www.logdict.com/archives/hexonext-zhu-ti-zeng-jia-dan-du-you-lian-wang-ye",
        "published": "2022-10-13 03:02:00",
        "summary": "Next主题是带有友链，只不过在侧边栏，友链过多不美观，可以自定义一个页面专门存放友链\n\n\n这个方法仅适用新版Next主题，即用Nunjucks模板引擎的新Next主题，确定是否是新版，layout里面的文件后缀是njk\n早期Next主题是ejs模板引擎，网上大多数也是针对旧版添加友情链接的方法，已经不适用新版\n\n1. 创建友情链接模板文件\nNext主题下->layout->_partials->page->创建links.njk文件\n文件内容如下\n{% block content %}\n  {######################}\n  {### LINKS BLOCK ###}\n  {######################}\n    <style>\n    .links-content {\n        margin-top: 1rem\n    }\n\n    .link-navigation::after {\n        content: \" \";\n        display: block;\n        clear: both\n    }\n\n    .card {\n        width: 130px;\n        font-size: 1rem;\n        padding: 0;\n        border-radius: 4px;\n        transition-duration: .15s;\n        margin-bottom: 1rem;\n        display: block;\n        float: left;\n        box-shadow: 0 2px 6px 0 rgba(0, 0, 0, .12);\n        background: #f5f5f5\n    }\n\n    .card {\n        margin-left: 16px\n    }\n\n    @media(max-width:567px) {\n        .card {\n            margin-left: 16px;\n            width: calc((100% - 16px)/2)\n        }\n\n        .card:nth-child(2n+1) {\n            margin-left: 0\n        }\n\n        .card:not(:nth-child(2n+1)) {\n            margin-left: 16px\n        }\n    }\n\n    @media(min-width:567px) {\n        .card {\n            margin-left: 16px;\n            width: calc((100% - 32px)/3)\n        }\n\n        .card:nth-child(3n+1) {\n            margin-left: 0\n        }\n\n        .card:not(:nth-child(3n+1)) {\n            margin-left: 16px\n        }\n    }\n\n    @media(min-width:768px) {\n        .card {\n            margin-left: 16px;\n            width: calc((100% - 48px)/4)\n        }\n\n        .card:nth-child(4n+1) {\n            margin-left: 0\n        }\n\n        .card:not(:nth-child(4n+1)) {\n            margin-left: 16px\n        }\n    }\n\n    @media(min-width:1200px) {\n        .card {\n            margin-left: 16px;\n            width: calc((100% - 64px)/5)\n        }\n\n        .card:nth-child(5n+1) {\n            margin-left: 0\n        }\n\n        .card:not(:nth-child(5n+1)) {\n            margin-left: 16px\n        }\n    }\n\n    .card:hover {\n        transform: scale(1.1);\n        box-shadow: 0 2px 6px 0 rgba(0, 0, 0, .12), 0 0 6px 0 rgba(0, 0, 0, .04)\n    }\n\n    .card .thumb {\n        width: 100%;\n        height: 0;\n        padding-bottom: 100%;\n        background-size: 100% 100% !important\n    }\n\n    .posts-expand .post-body img {\n        margin: 0;\n        padding: 0;\n        border: 0\n    }\n\n    .card .card-header {\n        display: block;\n        text-align: center;\n        padding: 1rem .25rem;\n        font-weight: 500;\n        color: #333;\n        white-space: normal\n    }\n\n    .card .card-header a {\n        font-style: normal;\n        color: #2bbc8a;\n        font-weight: 700;\n        text-decoration: none;\n        border: 0\n    }\n\n    .card .card-header a:hover {\n        color: #d480aa;\n        text-decoration: none;\n        border: 0\n    }\n</style>\n<div class=\"links-content\">\n        <div class=\"link-navigation\" id=\"links1\">\n            {% for link in theme.mylinks %}\n            <div class=\"card\" title=\"{{link.info}}\">\n                <a href=\"{{ link.site }}\" target=\"_blank\">\n                    <div class=\"thumb\" style=\"background: url( '{{ link.avatar }} ');\">\n                    </div>\n                </a>\n                <div class=\"card-header\">\n                    <div>\n                        <a href=\"{{ link.site }}\" target=\"_blank\">\n                            {{ link.nickname }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n            {% endfor %}\n        </div>\n</div>\n<hr/>\n<div style=\"text-align:center;\" color=\"red\">\n    本页面评论已禁用\n  <span class=\"with-love\" id=\"animate1\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n  <a href=\"/comments\">\n    <b>点击此处添加友链</b>\n  </a>\n  <span class=\"with-love\" id=\"animate2\">\n    <i class=\"fa fa-heart\"></i>\n  </span></div>         \n<hr/>      \n  {##########################}\n  {### END LINKS BLOCK ###}\n  {##########################}\n{% endblock %}\n\n2.  修改主题配置文件\nmenu:\n  # 增加\n  links: /links || fa fa-link\n  \n\n3. 增加中文对照项\n主题根目录->languages->zh-CN文件添加如下内容\nmenu:\n  # 自动将菜单中 links 映射成友链\n  links: 友链\n\n4. 主题配置文件添加友链信息\nmylinks:\n  - nickname: #友链名称\n    avatar: #友链头像\n    site:  #友链地址\n    info:  #友链说明\n"
    },
    {
        "title": "docker 在centos上部署安装seafile pro",
        "link": "https://www.logdict.com/archives/docker-zai-centos-shang-bu-shu-an-zhuang-seafilepro",
        "published": "2022-10-13 01:01:00",
        "summary": "安装seafile\npro版本三用户免费\n1. 安装docker\n# 安装 Docker\nyum -y install docker\n# 启动 Docker\nsystemctl start docker\n# 设置 Docker开机自启动\nsystemctl enable docker\n\n#-----------------------------其它 Docker常用命令-----------------------------\n# 查看版本号\ndocker -v\n# 查看 Docker 状态，报错时候使用\nsystemctl status docker\n# 停止 Docker\nsystemctl stop docker\n# 重启 Docker \nsystemctl restart docker \n# 查看正在运行的容器\ndocker ps \n# 查看所有容器，包括停止的容器\ndocker ps -a\n# 查看容器占用资源情况\ndocker stats\n# 查看容器的日志（可在这查看报错信息）\ndocker logs 容器名或ID\n# 启动已被停止的容器\ndocker start 容器名或ID\n# 停止运行中的容器\ndocker stop 容器名或ID\n# 重启容器\ndocker restart 容器名或ID\n\n2.  安装 docker-compose\n# 添加企业版附加包\nyum -y install epel-release\n# 安装pip\nyum -y install python-pip\n# 更新pip\npip install --upgrade pip\n# 安装docker-compose\npip install docker-compose\n\n# 查看docker compose的版本\ndocker-compose version\n\n注意\ncentos7及以下版本执行安装pip install --upgrade pip可能会报错，原因是centos7及以下版本是python2的版本，这里需要安装python3然后再用pip3进行更新和安装Centos7 升级Python\n3. 下载并修改 docker-compose.yml\n引用 Seafile 官方文档：\n\n下载 docker-compose.yml 示例文件到您的服务器上，然后根据您的实际环境修改该文件。尤其是以下几项配置：\nMySQL root 用户的密码 (MYSQL_ROOT_PASSWORD and DB_ROOT_PASSWD)\n持久化存储 MySQL 数据的 volumes 目录 (volumes)\n持久化存储 Seafile 数据的 volumes 目录 (volumes)\n持久化存储 Elasticsearch 索引数据的 volumes 目录 (volumes)\n下载docker-compose.yml到本地，然后修改完成后上传到服务器/opt目录。\n\n注意\nopt目录可以自选\n设置 mysql 的 root 密码\nSeafile 中需要填写第一步设置的 mysql 密码\n设置 Seafile 管理员账号邮箱\n设置 Seafile 管理员账号密码\n开启 https 443 端口\n设置 https 域名\nversion: '2.0'\nservices:\n  db:\n    image: mariadb:10.5\n    container_name: seafile-mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=yourpwd  # 配置数据库root用户密码\n      - MYSQL_LOG_CONSOLE=true\n    volumes:\n      - /opt/seafile-mysql/db:/var/lib/mysql  # 配置宿主机和容器路径映射\n    networks:\n      - seafile-net\n\n  memcached:\n    image: memcached:1.6\n    container_name: seafile-memcached\n    entrypoint: memcached -m 256\n    networks:\n      - seafile-net\n\n  elasticsearch:\n    image: elasticsearch:7.16.2\n    container_name: seafile-elasticsearch\n    environment:\n      - discovery.type=single-node\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms100m -Xmx300m\"\n    volumes:\n      - /opt/seafile-elasticsearch/data:/usr/share/elasticsearch/data  # 配置宿主机和容器的映射路径\n    networks:\n      - seafile-net\n         \n  seafile:\n    image: docker.seafile.top/seafileltd/seafile-pro-mc:latest\n    container_name: seafile\n    ports:\n      - \"28880:80\"\n      - \"28881:8000\"\n      - \"28882:8082\"\n      - \"28883:8080\"\n#     - \"443:443\"  # If https is enabled, cancel the comment.\n    volumes:\n      - /opt/seafile-data:/shared   # 配置映射路径\n    environment:\n      - DB_HOST=db\n      - DB_ROOT_PASSWD=yourpwd  # Requested, the value shuold be root's password of MySQL service.\n#      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.\n      - SEAFILE_ADMIN_EMAIL=your mail # 配置管理员用户邮箱\n      - SEAFILE_ADMIN_PASSWORD=yourpwd    # 配置管理员密码\n      - SEAFILE_SERVER_LETSENCRYPT=false   # Whether to use https or not\n      - SEAFILE_SERVER_HOSTNAME=yourhost # 如果启用https配置你的域名\n    depends_on:\n      - db\n      - memcached\n      - elasticsearch\n      #- onlyoffice\n    networks:\n      - seafile-net\n      \n      \n  \n  onlyoffice:\n    image: onlyoffice/documentserver\n    container_name: onlyoffice\n    restart: always\n    ports:\n      - \"8443:443\"\n      - \"8088:80\"\n    volumes:\n      - /opt/seafile-onlyoffice/log:/var/log/onlyoffice \n      - /opt/seafile-onlyoffice/data:/var/www/onlyoffice/Data \n      - /opt/seafile-onlyoffice/lib:/var/lib/onlyoffice \n      - /opt/seafile-onlyoffice/db:/var/lib/postgresql onlyoffice/documentserver\n    \nnetworks:\n  seafile-net:\n\n\n\n注\n以上映射路径可以自己选择\n4. 启动seafile\n注意：seafile 9.0 版本，需要手动在宿主机上创建 elasticsearch 的映射路径，并且给 777 权限，否则 elasticsearch 启动会报路径权限问题，命令如下，通常如果启动后内存占用过高或者无法打开，可以尝试排错\nmkdir -p /opt/seafile-elasticsearch/data  && chmod 777 -R /opt/seafile-elasticsearch/data\ncd /opt\ndocker-compose up -d\n\n\n配置 Seafile https ssl 证书\n服务初始化完成后，需要上传自己的 ssl 证书。\n\n5. 配置nginx\n\n创建 ssl 目录，然后将证书上传到该目录\nseafile容器自带了nginx，所以直接配置即可\nmkdir /opt/seafile-data/ssl\n修改 Nginx 的配置文件，配置ssl。\nvim /opt/seafile-data/nginx/conf/seafile.nginx.conf\nssl 配置如下：\n\nserver {\n\tlisten 443;\n    server_name example.seafile.com; # 你的域名\n    \n    ssl on;\n    ssl_certificate /shared/ssl/你的证书.pem;        #pem 文件路径\n    ssl_certificate_key /shared/ssl/你的证书.key;    #pem 文件路径\n    ssl_session_timeout 5m;\n    ssl_session_cache shared:SSL:5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置\n\tssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置\n    ssl_prefer_server_ciphers on;\n\n    proxy_set_header X-Forwarded-For $remote_addr;\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\";\n    server_tokens off;\n    # 注释掉80端口自动转发到443端口，添加一句'error_page 497 301 https://$http_host$request_uri;'，这样就可以实现http自动跳转到https了。\n    error_page 497 301 =307 https://v.itmm.wang:6443$request_uri;\n    \n    ... 后面的内容保持不变\n    location / {        \n       ... \n    }\n    ...\n}\n\n\n配置完成后重启nginx\ndocker exec -it seafile /usr/sbin/nginx -s reload\n\n6. 防火墙放行端口\n开放端口\nfirewall-cmd --zone=public --add-port=443/tcp --permanent\n\n顺便把 OnlyOffice 用到的两个端口也开放，后面就不用再开了\nfirewall-cmd --zone=public --add-port=8088/tcp --permanent\n\nfirewall-cmd --zone=public --add-port=8443/tcp --permanent\n\n重载防火墙\nfirewall-cmd --reload\n\n这时候应该可以通过你的域名https://example.seafile.com访问Seafile主页了。\n安装onlyoffice\n参考 https://blog.itmm.wang/docker-seafilepro-onlyoffice-centos/#二、安装OnlyOffice\n该插件用于在线编辑网盘上的文档，实现协同办公，但是此插件要求配置较高，至少服务器内存4G以上，否则会卡死，如果单纯做网盘不建议安装。"
    },
    {
        "title": "MySql8.0登录Navcat因验证方式而报错caching_sha2_password",
        "link": "https://www.logdict.com/archives/mysql80-deng-lu-navcat-yin-yan-zheng-fang-shi-er-bao-cuo-cachingsha2password",
        "published": "2021-03-15 01:52:00",
        "summary": "报错内容：caching_sha2_password\n适用：新安装且为启动服务之前\n解决方法1\n\n更改mysql配置文件my.ini或my.cnf\n\n增加这一句设置默认插件为旧版\ndefault_authentication_plugin = mysql_native_password\n\n\n解决方法2\n直接在表中修改\n适用于：已经启动\n查看\nuse mysql;\nDatabase changed\nSELECT Host, User, plugin from user;\n\n修改root的验证方式\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';\nFLUSH PRIVILEGES;\n"
    },
    {
        "title": "在CentOS8上安装Nginx+Nextcloud21",
        "link": "https://www.logdict.com/archives/zai-centos8-shang-an-zhuang-nginxnextcloud21",
        "published": "2021-03-12 19:02:00",
        "summary": "1.安装Nginx\n如果是CentOS8以下替换成yum安装，dnf是新一代包管理工具。\nsudo dnf install nginx\n# 启动\nsystemctl start nginx\n# 设置开机自启\nsystemctl enable nginx\n# 查看状态\nsystemctl status nginx\n\n添加https和http端口到防火墙，如果你开启了防火墙，否则忽略这一步\nfirewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n\n2.安装PHP FPM\n安装一些必要的工具\ndnf install -y epel-release yum-utils unzip curl wget \\\nbash-completion policycoreutils-python-utils mlocate bzip2\n\n安装REMI仓库\ndnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm\n\n\n安装yum-utils package\ndnf install yum-utils\n\ndnf module reset php\ndnf module install php:remi-7.4\n\n安装PHP所需模块\ndnf install -y php php-gd php-mbstring php-intl php-pecl-apcu\\\n     php-mysqlnd php-opcache php-json php-zip\n\ndnf install -y php-redis php-imagick\n\n3.配置PHP-FPM\nvim /etc/php.ini增加或取消如下注释并保存\nmemory_limit = 512M\ndate.timezone = Asia/Shanghai\ncgi.fixpathinfo = 0\n\n配置PHP opcache\nvim /etc/php.d/10-opcache.ini\n\n配置PHP-FPM\nvim /etc/php-fpm.d/www.conf\n\n确保如下内容，取消注释或者修改，保存\nlisten = /run/php-fpm/www.sock\nuser = nginx\ngroup = nginx\nuser.ower = nginx\ngroup.ower = nginx\nlisten.mode = 0660\nenv[HOSTNAME] = $HOSTNAME\nenv[PATH] = /usr/local/bin:/usr/bin:/bin\nenv[TMP] = /tmp\nenv[TMPDIR] = /tmp\nenv[TEMP] = /tmp\nphp_value[opcache.file_cache] = /var/lib/php/opcache\n\n\n创建如下文件夹并授予权限，如提示已存在，直接授予权限即可\nmkdir -p /var/lib/php/{session,opcache}\nchown -R nginx:nginx /var/lib/php/{session,opcache}\n\n设置开机自启和重启\nsystemctl enable php-fpm\nsystemctl start php-fpm\n\n查看服务状态，正常如下\nnetstat -pl | grep php\nsystemctl status php-fpm\n\n正常显示如下\nunix  2      [ ACC ]     STREAM     LISTENING     18586    673/php-fpm: master  /run/php-fpm/www.sock\n\n Active: active (running) since Fri 2021-03-12 03:16:42 HKT; 10h ago\n Main PID: 673 (php-fpm)\n   Status: \"Processes active: 0, idle: 13, Requests: 335, slow: 0, Traffic: 0req/sec\"\n    Tasks: 24 (limit: 11493)\n   Memory: 670.3M\n   CGroup: /system.slice/php-fpm.service\n           ├─ 673 php-fpm: master process (/etc/php-fpm.conf)\n           ├─ 709 php-fpm: pool www\n           ├─ 710 php-fpm: pool www\n           ├─ 711 php-fpm: pool www\n           ├─ 712 php-fpm: pool www\n           ├─ 713 php-fpm: pool www\n           ├─1168 php-fpm: pool www\n           ├─1174 php-fpm: pool www\n           ├─1179 php-fpm: pool www\n           ├─1183 php-fpm: pool www\n           ├─1199 bash -c ( /var/www/nextcloud/apps/richdocumentscode/collabora/Collabora_Online.AppImage || /var/www/nextcloud>\n           ├─1214 /var/www/nextcloud/apps/richdocumentscode/collabora/Collabora_Online.AppImage --appimage-extract-and-run\n\n\n3.安装数据库\n如果本来已经安装Mysql也可，建议安装8.0，新版已经不支持8.0以下的MySQL\nsudo dnf install mariadb mariadb-server\nsystemctl start mariadb\nsystemctl enable mariadb\n\n按照提示设置密码等选项\nmysql_secure_installation\n\n\n登录\nmysql -u root -p yourpassword\n执行如下命令创建数据库并新建专属用户授予其权限\ncreate database nextcloud_db;\ncreate user nextclouduser@localhost identified by 'nextcloudpassdb';\ngrant all privileges on nextcloud_db.* to nextclouduser@localhost identified by 'nextcloudpassdb';\nflush privileges;\n\n4.生成SSL证书\n这一步，推荐直接去腾讯云等申请SSL证书\n当然也可以如下\nsudo dnf install certbot\n\n下面确保换成你的域名和邮箱\ncertbot certonly --webroot --webroot-path /usr/share/nginx/html --agree-tos -m myemail@gmail.com -d cloud.hakase-labs.io\n\n保存在了/etc/letsencrypt/live/cloud.hakase-labs.io/\n用下面命令检查\nls -lah /etc/letsencrypt/live/cloud.hakase-labs.io/\n\n5.安装Nextcloud\n安装解压工具sudo dnf install unzip\n切换目录并下载\ncd /var/www/\n# 最新版下载链接https://nextcloud.com/install/  ->server\nwget https://download.nextcloud.com/server/releases/nextcloud-21.0.0.zip\n\n\n解压\nuzip nextcloud-21.0.0.zip\n\n创建数据目录并更改权限\nmkdir -p /var/www/nextcloud/data/\nsudo chown -R nginx:nginx /var/www/nextcloud\n\n6.配置Nginx\n在nginx.conf添加如下内容\n\nupstream php-handler {\n    server 127.0.0.1:9000;\n    server unix:/run/php-fpm/www.sock;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    # 替换成你的\n    server_name cloud.example.com;\n\n    # Enforce HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443      ssl http2;\n    listen [::]:443 ssl http2;\n    # 替换成你的\n    server_name cloud.example.com;\n\n    # Use Mozilla's guidelines for SSL/TLS settings\n    # https://mozilla.github.io/server-side-tls/ssl-config-generator/\n    # 下面给两个证书地址替换成你的\n    ssl_certificate      /ssl/;\n    ssl_certificate_key  /ssl/;\n\n    # HSTS settings\n    # WARNING: Only add the preload option once you read about\n    # the consequences in https://hstspreload.org/. This option\n    # will add the domain to a hardcoded list that is shipped\n    # in all major browsers and getting removed from this list\n    # could take several months.\n    #add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload;\" always;\n\n    # set max upload size\n    client_max_body_size 512M;\n    fastcgi_buffers 64 4K;\n\n    # Enable gzip but do not remove ETag headers\n    gzip on;\n    gzip_vary on;\n    gzip_comp_level 4;\n    gzip_min_length 256;\n    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;\n    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;\n\n    # Pagespeed is not supported by Nextcloud, so if your server is built\n    # with the `ngx_pagespeed` module, uncomment this line to disable it.\n    #pagespeed off;\n\n    # HTTP response headers borrowed from Nextcloud `.htaccess`\n    add_header Referrer-Policy                      \"no-referrer\"   always;\n    add_header X-Content-Type-Options               \"nosniff\"       always;\n    add_header X-Download-Options                   \"noopen\"        always;\n    add_header X-Frame-Options                      \"SAMEORIGIN\"    always;\n    add_header X-Permitted-Cross-Domain-Policies    \"none\"          always;\n    add_header X-Robots-Tag                         \"none\"          always;\n    add_header X-XSS-Protection                     \"1; mode=block\" always;\n\n    # Remove X-Powered-By, which is an information leak\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/nextcloud;\n\n    # Specify how to handle directories -- specifying `/index.php$request_uri`\n    # here as the fallback means that Nginx always exhibits the desired behaviour\n    # when a client requests a path that corresponds to a directory that exists\n    # on the server. In particular, if that directory contains an index.php file,\n    # that file is correctly served; if it doesn't, then the request is passed to\n    # the front-end controller. This consistent behaviour means that we don't need\n    # to specify custom rules for certain paths (e.g. images and other assets,\n    # `/updater`, `/ocm-provider`, `/ocs-provider`), and thus\n    # `try_files $uri $uri/ /index.php$request_uri`\n    # always provides the desired behaviour.\n    index index.php index.html /index.php$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( $http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/$is_args$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    # `location ~ /(\\.|autotest|...)` which would otherwise handle requests\n    # for `/.well-known`.\n    location ^~ /.well-known {\n        # The following 6 rules are borrowed from `.htaccess`\n\n        location = /.well-known/carddav     { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav      { return 301 /remote.php/dav/; }\n        # Anything else is dynamically handled by Nextcloud\n        location ^~ /.well-known            { return 301 /index.php$uri; }\n\n        try_files $uri $uri/ =404;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths from clients\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 404; }\n    location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console)              { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`\n    # to the URI, resulting in a HTTP 500 error response.\n    location ~ \\.php(?:$|/) {\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        set $path_info $fastcgi_path_info;\n\n        try_files $fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param PATH_INFO $path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice\n        fastcgi_param front_controller_active true;     # Enable pretty urls\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\.(?:css|js|svg|gif)$ {\n        try_files $uri /index.php$request_uri;\n        expires 6M;         # Cache-Control policy borrowed from `.htaccess`\n        access_log off;     # Optional: Don't log access to assets\n    }\n\n    location ~ \\.woff2?$ {\n        try_files $uri /index.php$request_uri;\n        expires 7d;         # Cache-Control policy borrowed from `.htaccess`\n        access_log off;     # Optional: Don't log access to assets\n    }\n\n    location / {\n        try_files $uri $uri/ /index.php$request_uri;\n    }\n}\n\n测试配置文件并保存\nnginx -t\nsystemctl restart nginx\n\n7.配置SELinx\n仅仅在启动的情况下，否则忽略这一步\n安装管理工具\nsudo dnf install policycoreutils-python-utils\n\n\n配置\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/data(/.*)?'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/config(/.*)?'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/apps(/.*)?'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/assets(/.*)?'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/.htaccess'\nsemanage fcontext -a -t httpd_sys_rw_content_t '/var/www/nextcloud/.user.ini'\n \nrestorecon -Rv '/var/www/nextcloud/'\n\n8.进入Nextcloud网页端安装\n此处按界面提示操作即可\n9.故障排除\n一般出现最多的是由于权限问题导致禁止访问，首先保证上面步骤中的授予某些目录权限是否执行。其次查看 nginx的error.log确定原因。"
    }
]